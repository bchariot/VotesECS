{"version":3,"sources":["hooks/topTable.js","hooks/gridTable.js","hooks/votes.js","App.js","serviceWorker.js","index.js"],"names":["forwardedTopTable","React","forwardRef","ref","dataItems","title","count","className","map","member","key","NameId","href","Href","target","rel","src","Jpeg","Party","width","height","alt","onError","e","onerror","Name","Abbr","vCount","percentMissed","slice","parseInt","forwardedGridTable","columnDefs","xmlns","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","style","rowData","Votes","showWorstRef","useRef","showBestRef","useState","isWorst","setIsWorst","isBest","setIsBest","votes1","setVotes1","votes2","setVotes2","votes3","setVotes3","votes4","setVotes4","columnDefs1","headerName","field","sortable","unSortIcon","filter","floatingFilter","resizable","cellClassRules","cellRenderer","value","columnDefs2","useEffect","fetch","then","res","json","data","console","log","current","focus","id","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14cefe6e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TopTable = ({dataItems, title, count}, ref) => {\r\n    return (\r\n        <div className=\"worstTable\">\r\n            <span className=\"bold\">Top {count} {title}</span>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        {dataItems.map(member =>\r\n                        <td className=\"worstTdClass\" key={member.NameId}>\r\n                            <table>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td className=\"tdCenter\">\r\n                                            <a href={member.Href} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                                <img src={\"https://bioguideretro.congress.gov/Static_Files/data/photo/\" + member.Jpeg} className={\"Image\" + member.Party} width=\"150\" height=\"210\" alt=\"\" onError={(e)=>{e.target.onerror = null; e.target.src=\"./ImageNotFound.png\"}} /><br />\r\n                                                <span className=\"worstName\">{member.Name}</span><br />\r\n                                                <span className=\"worstAbbr\">{member.Abbr}</span>\r\n                                            </a><br />\r\n                                            <span className=\"worstVotes\">Missed votes: <span className=\"bold\">{member.vCount} ({member.percentMissed}%)</span></span>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </td>).slice(0, parseInt(count))}\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst forwardedTopTable = React.forwardRef(TopTable);\r\n\r\nexport default forwardedTopTable;\r\n","import React from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\n\r\nconst GridTable = ({dataItems, title, columnDefs}, ref) => {\r\n    return (\r\n        <div>\r\n            <details>\r\n                <summary>\r\n                    <span className=\"summary-title\">{title} - Details</span>\r\n                    <div className=\"summary-chevron-up\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className =\"feather feather-chevron-down\"><polyline points=\"6 9 12 15 18 9\"></polyline></svg>\r\n                    </div>\r\n                </summary>\r\n                <div className=\"ag-theme-alpine\" style={{ height: '400px', width: '100%' }}>\r\n                    <AgGridReact className=\"ag-theme-alpine grid\" columnDefs={columnDefs} rowData={dataItems}></AgGridReact>\r\n                </div>\r\n            </details>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst forwardedGridTable = React.forwardRef(GridTable);\r\n\r\nexport default forwardedGridTable;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport TopTable from './topTable';\r\nimport GridTable from './gridTable';\r\n\r\nconst Votes = () => {\r\n    const showWorstRef = useRef(null), showBestRef = useRef(null);\r\n    const [isWorst, setIsWorst] = useState(false), [isBest, setIsBest] = useState(false);\r\n    const [votes1, setVotes1] = useState([]), [votes2, setVotes2] = useState([]), [votes3, setVotes3] = useState([]), [votes4, setVotes4] = useState([]);\r\n\r\n    let columnDefs1 = [\r\n        {headerName: 'Member Id', field: 'NameId', width: 150, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Name', field: 'Name', width: 300, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Party', field: 'Party', width: 120, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true, cellClassRules: {'rag-blue': 'x == \"D\"', 'rag-yellow': 'x != \"R\" && x != \"D\"', 'rag-red': 'x == \"R\"'}},\r\n        {headerName: 'State Name', field: 'StateName', width: 200, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'District', field: 'DistrictClass', width: 120, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Count', field: 'vCount', width: 120, sortable: true, unSortIcon: true, filter: 'agNumberColumnFilter', floatingFilter: true, resizable: true},\r\n        {headerName: 'Link', field: 'Href', width: 100, sortable: false, filter: false, floatingFilter: false, resizable: true, cellRenderer: (href) => `<a href=\"${href.value}\" target=\"_blank\" >Link</a>`}\r\n    ];\r\n    let columnDefs2 = [\r\n        {headerName: 'Member Id', field: 'NameId', width: 150, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Name', field: 'Name', width: 300, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Class', field: 'DistrictClass', width: 120, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Party', field: 'Party', width: 120, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true, cellClassRules: {'rag-blue': 'x == \"D\"', 'rag-yellow': 'x != \"R\" && x != \"D\"', 'rag-red': 'x == \"R\"'}},\r\n        {headerName: 'State Name', field: 'StateName', width: 200, sortable: true, unSortIcon: true, filter: true, floatingFilter: true, resizable: true},\r\n        {headerName: 'Count', field: 'vCount', width: 120, sortable: true, unSortIcon: true, filter: 'agNumberColumnFilter', floatingFilter: true, resizable: true},\r\n        {headerName: 'Link', field: 'Href', width: 100, sortable: false, filter: false, floatingFilter: false, resizable: true, cellRenderer: (href) => `<a href=\"${href.value}\" target=\"_blank\" >Link</a>`}\r\n    ];\r\n\r\n    const showWorst = () => { setIsWorst(!isWorst); showBestRef.current.focus(); }\r\n    const showBest = () => { setIsBest(!isBest); showWorstRef.current.focus(); }\r\n\r\n    useEffect(() => {\r\n        const fetchData = () => {\r\n            fetch('/api/worst/congress').then(res => res.json()).then(data => setVotes1(data)).then(console.log('absent congress fetched'));\r\n            fetch('/api/worst/senate').then(res => res.json()).then(data => setVotes2(data)).then(console.log('absent senate fetched'));\r\n            fetch('/api/best/congress').then(res => res.json()).then(data => setVotes3(data)).then(console.log('brave congress fetched'));\r\n            fetch('/api/best/senate').then(res => res.json()).then(data => setVotes4(data)).then(console.log('brave senate fetched'));\r\n        }\r\n        fetchData();\r\n        showWorstRef.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"votes\">\r\n            <span className=\"PageMenu\"><button ref={showWorstRef} onClick={showWorst}>Show The Most Absent</button> | <button ref={showBestRef} onClick={showBest}>Show The Bravest</button></span>\r\n            <div className=\"spacer\"></div>\r\n\r\n            { !isWorst && !isBest && <div className=\"Home\"><span>Press Buttons above for voting content</span></div> }\r\n\r\n            { isWorst && <TopTable dataItems={votes1} title=\"Most Absent Representatives\" count={5} /> }\r\n            { isWorst && <GridTable dataItems={votes1} title=\"Votes Missed By Representatives\" columnDefs={columnDefs1} /> }\r\n            { isWorst && <TopTable dataItems={votes2} title=\"Most Absent Senators\" count={5} /> }\r\n            { isWorst && <GridTable dataItems={votes2} title=\"Votes Missed By Senators\" columnDefs={columnDefs2} /> }\r\n\r\n            { isBest && <TopTable dataItems={votes3} title=\"Bravest Representatives\" count={5} /> }\r\n            { isBest && <GridTable dataItems={votes3} title=\"Bravest Representatives\" columnDefs={columnDefs1} /> }\r\n            { isBest && <TopTable dataItems={votes4} title=\"Bravest Senators\" count={5} /> }\r\n            { isBest && <GridTable dataItems={votes4} title=\"Bravest Senators\" columnDefs={columnDefs2} /> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Votes;","import React from 'react';\nimport './App.css';\nimport Votes from './hooks/votes';\n\nfunction App() {\n  return (\n    <Votes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}